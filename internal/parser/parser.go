// Package parser provides functionality to parse tokens into an abstract syntax tree (AST) in the YARTBML Programming Language.
// The parser analyzes tokens generated by the lexer and constructs an AST representing the program's structure.
// It defines grammar rules and recursively traverses the token stream to build the AST nodes.
// The implementation is a Top-Down Operator Precedence Parser (Pratt Parser).
package parser

import (
	"YARTBML/ast"
	"YARTBML/lexer"
	"YARTBML/token"
	"fmt"
)

// Parses each token received from the lexer and
// stores errors into a string array as they are spotted
// in the provided YARTBML program (UTF-8 string).
type Parser struct {
	l      *lexer.Lexer // Lexer instance for tokenization
	errors []string     // Parsing errors encountered

	curToken  token.Token // Current token being parsed
	peekToken token.Token // Next token to be parsed
}

// Creates a new instance of the Parser with a given Lexer.
func New(l *lexer.Lexer) *Parser {
	p := &Parser{
		l:      l,
		errors: []string{},
	}

	// read two tokens, so curToken and peekToken are both set
	// acts exactly like lexer's position and readPosition (for lookaheads)
	p.nextToken()
	p.nextToken()

	return p
}

// Advances the parser to the next token.
func (p *Parser) nextToken() {
	p.curToken = p.peekToken
	p.peekToken = p.l.NextToken()
}

// Parses the entire program and constructs the ast.
// Iterates over every token in the input until EOF token is encountered.
// Since our programs are a series of statements, it attempts to parse every statement in a sequence.
func (p *Parser) ParseProgram() *ast.Program {
	program := &ast.Program{}
	program.Statements = []ast.Statement{}

	for p.curToken.Type != token.EOF {
		stmt := p.parseStatement()
		if stmt != nil {
			program.Statements = append(program.Statements, stmt)
		}
		p.nextToken()
	}

	return program
}

// Parses each statement and create a statement node and
// child Expression nodes based on the type of statement node
// encountered.
func (p *Parser) parseStatement() ast.Statement {
	switch p.curToken.Type {
	case token.LET:
		return p.parseLetStatement()
	case token.RETURN:
		return p.parseReturnStatement()
	default:
		return nil
	}
}

// Parse Let Statements down to Name-Identifier Node and Value-Expression Node
func (p *Parser) parseLetStatement() *ast.LetStatement {
	// Construct LetStatement Node
	stmt := &ast.LetStatement{Token: p.curToken}

	if !p.expectPeek(token.IDENT) {
		return nil
	}

	// Construct Identifier Node: IDENT token & Name of Identifier as Value
	stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}

	if !p.expectPeek(token.ASSIGN) {
		return nil
	}

	// TODO: Skipping expressions until we encounter a semicolon
	// TODO: Construct Expression
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

// Parse Return Statements down to ReturnKeyword Statement Node & ReturnValue-Expression Node
func (p *Parser) parseReturnStatement() *ast.ReturnStatement {
	stmt := &ast.ReturnStatement{Token: p.curToken}

	p.nextToken()

	// TODO: Skipping the expressions until we encounter a semicolon
	// TODO: Construct Expression
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

// Check if currentToken's TokenType matches given TokenType
func (p *Parser) curTokenIs(t token.TokenType) bool {
	return p.curToken.Type == t
}

// Checks if the peekToken's (nextToken) TokenType matches given TokenType
func (p *Parser) peekTokenIs(t token.TokenType) bool {
	return p.peekToken.Type == t
}

// Checks if the nextToken is the given TokenType. Essentially, a lookahead by one
// in order to confirm the next token. If the given token is not expected, then
// we generate an error to append into the errors array that is part of the
// current [Parser] instance.
func (p *Parser) expectPeek(t token.TokenType) bool {
	if p.peekTokenIs(t) {
		p.nextToken()
		return true
	} else {
		p.peekError(t)
		return false
	}
}

// Returns all parsing errors encountered
func (p *Parser) Errors() []string {
	return p.errors
}

// Appends to errors property of the Parser Instance when the nextToken
// is not what is expected.
func (p *Parser) peekError(t token.TokenType) {
	msg := fmt.Sprintf("expected next token to be %s, got %s instead",
		t, p.peekToken.Type)
	p.errors = append(p.errors, msg)
}
